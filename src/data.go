// Code generated by go-bindata. DO NOT EDIT.
// sources:
// templates/.gitignore (17B)
// templates/Makefile (1.208kB)
// templates/README.md (14B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x2a\x4b\x2d\xd1\x2b\x4a\x2d\xc8\x2f\x2a\xe1\x02\x04\x00\x00\xff\xff\xbd\xe5\xe7\xf8\x11\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1547032455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x82, 0xb0, 0x5d, 0x23, 0x45, 0x12, 0x75, 0xfb, 0x29, 0xd2, 0x49, 0xd2, 0xc3, 0x1b, 0xfa, 0x18, 0xa, 0x16, 0x39, 0x48, 0xaf, 0x21, 0x7, 0xc9, 0x3a, 0xcd, 0x3c, 0x93, 0x89, 0xb0}}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x4f\x6f\xda\x40\x10\xc5\xcf\x99\x4f\x31\x4a\x4d\x93\xa8\x5d\xa3\x56\x55\x0f\x91\x9c\xd4\x04\x02\x48\x80\x23\x20\x51\x23\x55\x8a\xd6\x78\x6c\xb6\x5d\x7b\xad\xf5\x1f\x22\xb9\xfe\xee\xd5\xda\xa6\x24\x8a\xb8\xe4\x66\x3c\xf3\xdb\xf7\x66\xf6\x61\x7b\x38\xba\x75\xef\x67\xeb\xa7\xb1\xe7\xce\xd0\x41\x2e\x25\xc0\x60\xba\x70\x97\x8f\xe8\x60\x55\xa1\xbd\xe0\x31\x61\x5d\xc3\xc3\x68\xfd\xb4\x1c\xdd\x79\xcb\x35\x3a\x58\x52\x6e\x6b\x4a\x95\xce\x61\xec\xb9\xcb\x9b\x89\x41\xe3\xe0\xfb\x37\x80\x87\xd1\x72\x35\xf5\x16\xd7\x8e\x81\x1f\x48\x67\x42\x25\x86\x1f\xdc\x4f\x67\xc3\xa7\xf5\x74\x3e\xba\x76\xac\xf3\x6c\x4b\x52\x62\xc0\x73\x42\x56\xe0\xd9\xa7\xde\x63\x2f\xee\x05\xac\x37\xe9\xcd\xcf\x2e\xe0\xc6\x9b\xcf\xa7\xeb\x43\x5f\x24\x72\xd4\x54\xb2\x94\xeb\x8c\x70\x32\x72\x87\x17\x30\x58\xba\x8b\x9b\xc9\xb1\x1e\xc6\xb8\xef\x9b\x9f\x9a\xc2\x0e\x80\x0f\xb8\xa2\xbc\x48\x31\xdf\x12\x32\x19\x84\x92\x47\x19\xaa\x34\x37\x06\x43\xa5\x31\x52\xe8\x17\x42\x06\xb8\x25\x4d\x9f\x51\x24\x39\xe9\x54\x49\xe3\xd1\x20\x25\xd7\x82\xfb\xd2\x3c\xc8\x82\x32\x98\x0d\x6f\x67\xee\x78\x85\xce\xe1\xb0\x53\x96\x21\xdb\xe1\x2f\x38\x61\x3f\x31\xe6\x22\xb1\xcb\x76\x01\x8e\x55\x75\x7b\xa9\x5f\x56\x37\x2a\x8e\x45\xee\x58\x55\x3b\xf0\xab\x9a\xaf\x79\xb2\xd9\x3a\x56\xd5\x0e\x5a\xbf\x2c\x19\x97\x6b\x11\x93\xa9\xfe\x5f\x6b\x7d\x6a\x46\x1c\x34\x13\x18\xbf\xa9\x56\xbf\x69\x93\x03\x97\xf2\x12\x37\x92\x78\x62\xae\x0d\xa5\x48\x8a\x67\x0c\x35\x91\x9f\x05\x18\x70\xbd\x13\x09\xee\x44\x12\xa8\x5d\x06\xd0\x54\x2f\xe1\xe4\x47\xfc\x27\x10\x1a\x59\x8a\xbe\x48\xe0\x64\xec\x79\x2b\xa7\x25\xdb\xfb\x76\xac\xaa\x7d\xa8\x0f\x6b\xb3\xaa\x6e\x25\x35\x32\x65\xb8\xbe\x55\xb5\x51\xaa\x59\xc3\xb2\x03\x64\xf7\x33\xbd\x01\xe8\x6c\x1c\x11\xdc\x9b\x7c\x9f\x64\x47\xbf\x15\x6d\x67\x3e\xa2\xd9\x2d\xe4\x7d\x92\x2d\xfc\x56\xb1\x5b\xef\x11\xc9\xae\xfa\x4e\xcd\x8e\x3e\x88\xda\xf4\x4c\x7b\xe1\x92\x72\x23\x1a\xa9\xe6\xea\x9b\x97\x7d\xdb\xb6\xf1\x0a\x4d\x20\xf7\x7f\xe8\x1a\xbf\x5e\x7d\xfc\x02\x10\xc6\xfb\xee\x30\xce\xd1\x3a\x8f\x14\x4a\x91\xbd\xe4\xfe\x62\xa4\x29\x45\x56\x62\xbf\xa4\x24\x50\xba\x7f\x01\xd0\x64\xcb\x80\x3a\x46\x16\xbe\x3e\xb9\x7b\xab\xc3\x66\x5e\xd0\x85\x69\x8c\x14\xea\x22\x69\xb3\x1c\x29\x00\xfb\x6e\xe2\x2d\x1e\x2f\xcd\xc7\xa7\x8b\xe7\xeb\x58\x36\xe6\x8d\xa5\x36\xc5\xba\x48\xe0\x5f\x00\x00\x00\xff\xff\xf8\xdb\x63\xf7\xb8\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1208, mode: os.FileMode(0644), modTime: time.Unix(1547105613, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x9, 0xcd, 0xbc, 0xa2, 0x47, 0xd, 0x88, 0x82, 0x3b, 0x5c, 0xdf, 0x2a, 0xbd, 0x21, 0x87, 0xfc, 0xbf, 0x2b, 0xb9, 0x24, 0x3c, 0x58, 0xb6, 0xdf, 0x80, 0xc8, 0xd5, 0x30, 0xda, 0x19, 0x47, 0x7b}}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x32\x0c\x44\x2c\x0e\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1547036738, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x92, 0x43, 0x1b, 0x73, 0x34, 0x4a, 0xff, 0xab, 0xa2, 0x4e, 0x6f, 0x6b, 0xad, 0x68, 0xb6, 0xe2, 0xe0, 0xc1, 0x72, 0xa4, 0xb0, 0xbc, 0xf6, 0xbe, 0x65, 0x5a, 0x9a, 0x95, 0x32, 0x6c, 0x79}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,

	"Makefile": makefile,

	"README.md": readmeMd,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Makefile":   &bintree{makefile, map[string]*bintree{}},
	"README.md":  &bintree{readmeMd, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
