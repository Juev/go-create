// Code generated by go-bindata.
// sources:
// .gitignore
// LICENSE
// Makefile
// README.md
// bin/.keep
// main.go
// version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x02\x04\x00\x00\xff\xff\x15\xbe\x8a\x07\x06\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 6, mode: os.FileMode(420), modTime: time.Unix(1514144579, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _license = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xe3\x36\x10\xbe\xf3\x29\x3e\xe4\xb4\x0b\x08\xe9\xcf\xa5\x40\x6f\x8c\x44\x5b\x44\x65\xd2\xa0\xe8\x75\x7d\x94\x25\x3a\x62\x2b\x93\x86\x48\x27\xf0\xdb\x17\x23\x3b\xbb\xcd\x9e\x04\x71\xe6\xfb\x9d\x8d\xb4\x68\x7c\xef\x42\x72\x8c\x95\xf1\x72\x9b\xfd\xeb\x98\xf1\xa5\xff\x8a\xdf\x7f\xfd\xed\x0f\x88\xb7\x74\xbb\xfe\x1b\xdf\x50\xb9\xe0\x13\x63\x5b\x37\x9f\x7d\x4a\x3e\x06\xf8\x84\xd1\xcd\xee\x78\xc3\xeb\xdc\x85\xec\x86\x02\xa7\xd9\x39\xc4\x13\xfa\xb1\x9b\x5f\x5d\x81\x1c\xd1\x85\x1b\x2e\x6e\x4e\x31\x20\x1e\x73\xe7\x83\x0f\xaf\xe8\xd0\xc7\xcb\x8d\xc5\x13\xf2\xe8\x13\x52\x3c\xe5\xf7\x6e\x76\xe8\xc2\x80\x2e\xa5\xd8\xfb\x2e\xbb\x01\x43\xec\xaf\x67\x17\x72\x97\x49\xef\xe4\x27\x97\xf0\x25\x8f\x0e\x4f\xed\x03\xf1\xf4\x75\x11\x19\x5c\x37\x31\x1f\x40\xb3\x8f\x11\xde\x7d\x1e\xe3\x35\x63\x76\x29\xcf\xbe\x27\x8e\x02\x3e\xf4\xd3\x75\x20\x0f\x1f\xe3\xc9\x9f\xfd\x43\x81\xe0\x4b\xfe\xc4\x72\xc4\x35\xb9\x62\xf1\x59\xe0\x1c\x07\x7f\xa2\xaf\x5b\x62\x5d\xae\xc7\xc9\xa7\xb1\xc0\xe0\x89\xfa\x78\xcd\xae\x40\xa2\xc7\xa5\xc8\x82\x72\xfc\x12\x67\x24\x37\x4d\xac\x8f\x17\xef\x12\x96\xac\x3f\xdc\x2d\x3b\x64\xfd\x42\x85\xe6\x47\x45\x89\x5e\xde\xc7\x78\xfe\x9c\xc4\x27\x76\xba\xce\xc1\xa7\xd1\x2d\x98\x21\x22\xc5\x45\xf1\x1f\xd7\x67\x7a\xa1\xf5\x53\x9c\xa6\xf8\x4e\xd1\xfa\x18\x06\x4f\x89\xd2\x9f\x8c\xd9\xd1\xa1\x3b\xc6\x37\xb7\x64\xb9\x9f\x37\xc4\xec\xfb\x7b\xdd\xcb\x01\x2e\x3f\xae\xfa\x18\xa5\xb1\x9b\x26\x1c\xdd\xa3\x30\x37\xc0\x07\x74\xff\x8b\x33\x93\x7c\xca\x5d\xc8\xbe\x9b\x70\x89\xf3\xa2\xf7\x73\xcc\x67\xc6\x6c\x2d\xd0\xea\x95\xdd\x73\x23\x20\x5b\x6c\x8d\xfe\x26\x2b\x51\xe1\x89\xb7\x90\xed\x53\x81\xbd\xb4\xb5\xde\x59\xec\xb9\x31\x5c\xd9\x03\xf4\x0a\x5c\x1d\xf0\x97\x54\x55\x01\xf1\xf7\xd6\x88\xb6\x85\x36\x4c\x6e\xb6\x8d\x14\x55\x01\xa9\xca\x66\x57\x49\xb5\xc6\xcb\xce\x42\x69\x8b\x46\x6e\xa4\x15\x15\xac\x06\x09\x3e\xa8\xa4\x68\x89\x6c\x23\x4c\x59\x73\x65\xf9\x8b\x6c\xa4\x3d\x14\x6c\x25\xad\x22\xce\x95\x36\xe0\xd8\x72\x63\x65\xb9\x6b\xb8\xc1\x76\x67\xb6\xba\x15\xe0\xaa\x82\xd2\x4a\xaa\x95\x91\x6a\x2d\x36\x42\xd9\x67\x48\x05\xa5\x21\xbe\x09\x65\xd1\xd6\xbc\x69\x48\x8a\xf1\x9d\xad\xb5\x21\x7f\x28\xf5\xf6\x60\xe4\xba\xb6\xa8\x75\x53\x09\xd3\xe2\x45\xa0\x91\xfc\xa5\x11\x77\x29\x75\x40\xd9\x70\xb9\x29\x50\xf1\x0d\x5f\x8b\x05\xa5\x6d\x2d\x0c\xa3\xb5\xbb\x3b\xec\x6b\x41\x4f\xa4\xc7\x15\x78\x69\xa5\x56\x14\xa3\xd4\xca\x1a\x5e\xda\x02\x56\x1b\xfb\x1d\xba\x97\xad\x28\xc0\x8d\x6c\xa9\x90\x95\xd1\x9b\x82\x51\x9d\x7a\x45\x2b\x52\x11\x4e\x89\x3b\x0b\x55\x8d\x4f\x17\xd1\x66\xf9\xdf\xb5\xe2\x3b\x21\x2a\xc1\x1b\xa9\xd6\x2d\x81\x29\xe2\xc7\xf2\x33\xfb\x2f\x00\x00\xff\xff\x6e\x3a\x91\xc9\x2f\x04\x00\x00")

func licenseBytes() ([]byte, error) {
	return bindataRead(
		_license,
		"LICENSE",
	)
}

func license() (*asset, error) {
	bytes, err := licenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "LICENSE", size: 1071, mode: os.FileMode(420), modTime: time.Unix(1514143699, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\xda\x48\x14\x7d\xe6\xfe\x8a\xab\xac\xd9\x24\xbb\x3b\x46\x5b\x55\x7d\x40\x72\x22\x13\x1c\xa0\x02\x1c\x19\x13\x35\x52\x25\xe4\x8f\xc1\x4c\x3b\x9e\x41\xe3\x0f\x52\xb9\xfe\xef\xd5\xd8\x26\x40\xa5\xbe\xe4\xcd\x33\xf7\x9e\x7b\xce\x3d\x73\xc0\x1c\x3b\x8f\xf6\x7a\xee\x6f\x26\xae\x3d\x47\x0b\x03\xce\x01\x46\xb3\xa5\xed\xbd\xa0\x85\x89\x24\x59\xa4\x82\x3c\xda\xc1\xb3\xe3\x6f\x3c\xe7\xc9\xf5\x7c\xb4\xb0\xa4\xb9\xa9\xe8\x5e\xaa\x1c\x26\xae\xed\x3d\x4c\x35\x32\x8d\x3f\x7d\x04\x78\x76\xbc\xd5\xcc\x5d\xde\x5b\xf7\x30\x5a\xcf\xe6\xe3\x8d\x3f\x5b\x38\xf7\x96\x71\x93\xed\x28\xe7\x18\x07\x39\x45\x52\xe0\xf5\xbf\xfd\x97\x7e\xda\x8f\x49\x7f\xda\x5f\x5c\xdf\xc2\x83\xbb\x58\xcc\xfc\x53\x5f\xc2\x72\x54\xb4\x24\xfb\x40\x65\x14\xa7\x8e\x3d\xbe\x85\x91\x67\x2f\x1f\xa6\x7f\xea\x21\x24\x08\x43\x7d\x54\x74\xdb\x01\xe0\x2f\x5c\xfd\x48\x39\x13\xdf\x91\x89\x5c\xe2\xc4\x7d\xb2\xfd\x29\x4c\x66\xfe\x74\x3d\xda\xac\x57\x8e\xb7\xb4\x17\x8e\xf5\xb9\xa0\x65\x27\x76\x3c\xf3\x2c\xa3\x6a\xfb\xea\x41\xa6\xa2\x41\xc2\xf2\x5d\x11\x9a\x91\x4c\x07\x46\xf5\x1b\xb2\x1e\x18\x55\xeb\x55\xdd\x70\xd1\xbc\xd8\x63\xbe\xa3\x48\x78\xbc\xe5\x41\x92\xa1\xdc\xe7\x4c\x0a\xdc\x4a\x85\x89\xc4\xb0\x60\x3c\xc6\x1d\x55\xf4\x3f\x2d\x88\xaa\xbd\xe4\xda\x0f\x0d\x29\x03\xc5\x82\x90\xeb\x0f\x5e\xd0\x0c\xe6\xe3\xc7\xb9\x3d\x59\xa1\x75\x1a\x76\x45\x32\x24\x07\xfc\x0a\x3d\xf2\x05\xd3\x80\x09\xb3\xa4\x2a\x63\x52\x58\x46\xd5\xd9\x5e\x9f\x57\x23\x99\xa6\x2c\xb7\x8c\xaa\x35\xf7\xa2\x16\xaa\x40\x44\x3b\xcb\xa8\x5a\x53\xeb\xf3\x92\x56\xe9\xb3\x94\xea\xea\xdb\x13\xd6\x57\x7a\xc5\x51\xb3\x81\xd6\xbb\x57\xf2\x1b\x8d\x72\x08\x38\x1f\x62\xc4\x69\x20\x74\x2a\x90\x33\x51\xbc\xe2\x56\x51\x1a\x66\x31\xc6\x81\x3a\x30\x81\x07\x26\x62\x79\xc8\x00\x9a\xea\x10\x7a\x13\xd7\x5d\x59\x6d\x6b\x9b\x9f\xc6\x74\xfd\x51\x9f\x7c\x32\xaa\xce\x83\x1a\x89\xc4\x90\x89\x93\xdb\xa4\xc1\x92\x13\xc8\x04\xe8\x38\x8f\xd3\x8f\x12\xde\x37\xbf\x43\x5f\x32\xb4\xdb\x1c\x09\xba\xdd\xde\x37\xbf\x05\x5f\x8e\xef\x5c\x3a\xce\xef\x8e\xef\x24\xe8\xd0\x27\x06\x93\xbe\x52\xcd\x52\xd2\x7c\x08\xbd\x44\x36\xaf\x65\x0e\x4c\xd3\xc4\x3b\xd4\xf9\x39\xfe\xbc\x6b\xfc\x70\xf7\xf7\xff\x00\xdb\xb4\x6b\xdc\xa6\x39\x1a\xc6\x4d\x22\x91\xb3\xec\x88\xf9\x89\x89\xa2\x7b\x24\x25\x0e\x4a\x2a\x62\xa9\x06\xb7\x00\x4d\x0c\x86\xd0\x23\x2a\x45\xb2\x45\xa3\xf2\x9d\xd5\xdb\xd8\xb3\xeb\x33\xb2\xb7\xdb\x4b\xf9\xff\x00\xa8\x42\xb4\xfc\xaa\x10\x6d\x30\x13\x09\x60\x3e\x4d\xdd\xe5\xcb\x50\xff\x4f\x75\x59\xbb\xcc\x58\xb3\x96\x56\xdc\x46\x52\x15\x02\x7e\x05\x00\x00\xff\xff\xd5\xbb\xaf\xf1\xe3\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1514143700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x92\xdf\x8e\xda\x3c\x10\xc5\xef\xfd\x14\x23\xed\x77\xf5\x55\x10\xd8\x0d\x90\xec\x1d\x2b\x21\xca\x4a\x0b\x12\xec\x56\xda\xab\xe2\x38\xe3\xc4\xad\xe3\x41\xf6\x18\xca\xdb\x57\xe1\xbf\x5a\x7a\x99\x68\xce\xf1\xef\x9c\x99\x07\x98\x2e\x3a\x2b\xe5\x25\xab\x5a\x88\xf7\xda\x04\x08\xa6\xd9\x58\x04\x2b\xf7\x14\x19\x34\x79\xd8\x78\xfa\x81\x8a\x03\x90\x83\x29\x81\x95\xae\x8a\xb2\x42\x21\x5e\x63\x60\x50\x96\x1c\x02\xb7\x52\x8f\x1b\x0a\x86\xc9\xef\x9f\x85\x00\x00\xf8\x0f\x2a\x73\x9e\xa8\x99\x37\xe1\x39\x49\x2a\xc3\x75\x2c\xba\x8a\x9a\xe4\x35\xe2\x36\xa9\xa8\x13\x8e\x00\xe0\x70\xd7\x39\x3d\x76\x92\xab\xf2\xce\x4f\xdf\x40\xc7\x6b\xe8\x56\x86\x6f\x5e\x31\xce\x70\x1b\x01\x1d\xa8\x5a\xba\x0a\xe1\x4d\xfe\x44\x6d\x2c\x76\x85\x58\x78\xd8\x53\x04\x25\x1d\xc4\x80\xd0\xec\xa1\x90\xa1\x86\xa0\xbc\xd9\xf0\x05\x56\x45\x6f\xa1\x43\x90\xc4\xe0\x13\x4b\x4a\xda\xa4\x30\xee\x96\xf0\x1a\x22\x70\xf7\x98\x24\x06\xf4\x8a\x1c\xa3\xe3\x6b\xa8\x61\x9a\x95\x32\x1f\x3d\xe5\x4f\xfd\x5c\xa5\x83\x7e\x5a\x3c\x0e\x06\x43\x54\x45\x3e\xc2\xbc\x9f\xeb\xc4\xcb\x5d\xd2\x1b\xc8\x32\x2f\xd3\x2c\xeb\xa5\xa9\xcc\x0b\x3d\x54\xa3\x47\x3d\xd4\x45\xd6\x1b\x21\x96\x59\x3f\xeb\x3f\x16\xa9\x92\xbd\x1b\x80\x33\x68\xdd\x50\x09\x5f\x7e\xfd\x9b\xf4\x5c\xcc\xfd\x72\xc5\x58\x33\xfa\xe3\xd2\xda\x5e\x42\x4d\xd1\x96\x77\x7a\x7b\x78\xb8\x7c\x09\xf1\xf9\xd7\xe4\x56\xda\x88\x01\x48\x03\xd7\x08\x9a\xac\xa5\x9d\x71\x15\x6c\xa5\x37\xb2\xb0\x18\x84\xf8\x1f\xd6\x2f\xb3\xf9\x78\xf9\xb9\x3e\x8b\xb4\xa7\x06\xd6\x57\xb2\x35\x30\x1d\xf4\x4e\x36\xd8\x7a\xed\x29\x5e\x8e\xae\xd5\x4f\x67\xef\x5f\x3f\x5e\xbe\x7f\xac\x26\xcb\xf9\xf8\x6d\xf2\x87\x51\xdb\xf7\xc1\xe2\x20\x6b\xb7\xd1\xfa\xb4\xba\x6f\x93\xe5\x6a\xb6\x98\xaf\x21\x20\x5f\x06\x4e\xbe\xb0\x45\x1f\x0c\xb9\xf6\x62\x24\x9f\x63\x15\x08\x86\xbb\xe2\x77\x00\x00\x00\xff\xff\xc8\xee\x5c\x97\x16\x03\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 790, mode: os.FileMode(420), modTime: time.Unix(1514143700, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binKeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binKeepBytes() ([]byte, error) {
	return bindataRead(
		_binKeep,
		"bin/.keep",
	)
}

func binKeep() (*asset, error) {
	bytes, err := binKeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/.keep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514144636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc9\x31\x0e\xc2\x30\x0c\x85\xe1\xb9\x3e\x85\xe5\x29\x91\x2a\x0e\xc0\x08\x0b\x23\x03\x82\x39\xa4\x09\xb2\x88\xe3\x2a\xb8\x2c\x88\xbb\x23\x82\x58\xba\xfd\xef\x7d\x73\x88\xf7\x70\x4b\x28\x81\x2b\x00\xcb\xac\xcd\xd0\xc1\x40\x59\x8c\xc0\x03\xe4\xa5\xc6\xae\xce\xe3\x0b\x86\x2c\xb6\x39\x36\xae\x56\xaa\xa3\x43\x2a\x45\xf1\xa2\xad\x4c\xe4\x57\x76\x4e\xed\xc1\x5a\xb7\x48\x23\x3e\x7f\x3d\x22\xe1\x6e\xe1\x32\x9d\x58\x52\x87\xeb\x7f\x7d\x69\xaf\x22\x6c\xfd\x8f\x3d\x3d\xbc\xe1\x13\x00\x00\xff\xff\x17\x46\x01\xd4\xa0\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 160, mode: os.FileMode(420), modTime: time.Unix(1514143701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\x4b\x2c\x52\xd0\xe0\xe2\x4c\x2a\xcd\xcc\x49\x09\xc9\xcc\x4d\x55\xb0\x55\x50\x2a\xcd\x2b\x4e\x2d\x51\xe2\xe2\x4c\xce\xcf\xcd\xcd\x2c\x51\x50\x50\x40\x16\x2c\x4b\x2d\x2a\xce\xcc\xcf\x43\x15\x4c\x2a\x4a\xcc\x4b\xce\x40\x55\xa9\xc9\x05\x08\x00\x00\xff\xff\xb7\x30\xba\x84\x6a\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 106, mode: os.FileMode(420), modTime: time.Unix(1514143702, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"LICENSE": license,
	"Makefile": makefile,
	"README.md": readmeMd,
	"bin/.keep": binKeep,
	"main.go": mainGo,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"LICENSE": &bintree{license, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		".keep": &bintree{binKeep, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

