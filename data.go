// Code generated by go-bindata.
// sources:
// .gitignore
// Makefile
// README.md
// bin/.keep
// main.go
// version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x2a\x4b\x2d\xd1\x2b\x4a\x2d\xc8\x2f\x2a\xe1\x02\x04\x00\x00\xff\xff\xbd\xe5\xe7\xf8\x11\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 17, mode: os.FileMode(420), modTime: time.Unix(1514802078, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x5d\x6f\xda\x4a\x10\x7d\x66\x7e\xc5\x28\xd7\xdc\x24\xf7\x76\x8d\x5a\x55\x7d\x40\x72\x22\x13\x1c\x40\x02\x1c\x19\x13\x35\x52\x25\x64\xe3\xc5\x6c\xbb\xde\x45\xeb\x0f\x52\xb9\xfe\xef\xd5\xda\x26\x86\x4a\x7d\xc9\x9b\x77\x67\xce\x9c\x33\x67\x0f\x98\x63\xe7\xd1\x5e\xcf\xfd\xcd\xc4\xb5\xe7\x68\x61\xc0\x39\xc0\x68\xb6\xb4\xbd\x17\xb4\xb0\x2c\xd1\x5c\x06\x09\xc5\xaa\x82\x67\xc7\xdf\x78\xce\x93\xeb\xf9\x68\x61\x41\x33\x53\xd1\x83\x54\x19\x4c\x5c\xdb\x7b\x98\x6a\x68\x12\x7d\xf9\x0c\xf0\xec\x78\xab\x99\xbb\xbc\xb7\x34\xf8\x99\xaa\x94\x49\xa1\xf1\xa3\xf5\x6c\x3e\xde\xf8\xb3\x85\x73\x6f\x19\x37\xe9\x9e\x72\x8e\x51\x90\x51\x24\x39\x5e\xff\xdf\x7f\xe9\x27\xfd\x88\xf4\xa7\xfd\xc5\xf5\x2d\x3c\xb8\x8b\xc5\xcc\xef\xfa\x62\x96\xa1\xa2\x05\x39\x04\x2a\xa5\x38\x75\xec\xf1\x2d\x8c\x3c\x7b\xf9\x30\xfd\x5b\x0f\x21\x41\x18\xea\xa3\xa2\xbb\x16\x00\xff\xe0\xea\x67\xc2\x99\xf8\x81\x4c\x64\x12\x27\xee\x93\xed\x4f\x61\x32\xf3\xa7\xeb\xd1\x66\xbd\x72\xbc\xa5\xbd\x70\x6a\xd9\x13\x96\xed\xf3\xb0\x53\x3d\x9e\x79\x96\x51\x36\x80\x6a\x90\xaa\xed\x20\xae\x3b\xcc\xad\x4c\x06\x46\xf9\xc7\x88\x6a\x60\x94\x8d\x85\x55\x4d\x4a\xb3\xfc\x80\xd9\x9e\x22\xe1\xd1\x8e\x07\x71\x8a\xf2\x90\x69\x57\x76\x52\x61\x2c\x31\xcc\x19\x8f\x70\x4f\x15\xfd\xa0\x95\x51\x75\x90\x5c\x1b\xa3\x21\x45\xa0\x58\x10\x72\xfd\xc1\x73\x9a\xc2\x7c\xfc\x38\xb7\x27\x2b\xb4\xba\x61\x57\x24\x45\x72\xc4\x6f\xd0\x23\x5f\x31\x09\x98\x30\x8b\xc6\x75\xcb\x28\xdb\xc7\xa8\xce\xab\x5b\x99\x24\x2c\xb3\x8c\xb2\x71\xf9\xa2\x16\xaa\x40\x6c\xf7\x96\x51\x36\xee\x56\xe7\x25\xad\xd2\x67\x09\xd5\xd5\xb7\xb7\xac\xae\xf4\x8a\xa3\x7a\x03\xad\xf7\xa0\xe4\x77\xba\xcd\x20\xe0\x7c\x88\x5b\x4e\x03\xa1\xb3\x82\x9c\x89\xfc\x15\x77\x8a\xd2\x30\x8d\x30\x0a\xd4\x91\x09\x3c\x32\x11\xc9\x63\x0a\x50\x57\x87\xd0\x9b\xb8\xee\xca\x6a\x5a\x9b\x54\xd5\xa6\xeb\x8f\xaa\xf3\xc9\x28\x5b\x0f\x2a\x24\x12\x43\x26\x3a\xb7\x49\x8d\x25\x1d\xc8\x04\x68\x39\x4f\xd3\x4f\x12\xde\x37\xbf\x45\x5f\x32\x34\xdb\x9c\x08\xda\xdd\xde\x37\xbf\x01\x5f\x8e\x6f\x5d\x3a\xcd\x6f\x8f\xef\x24\x68\xd1\x1d\x83\x49\x5f\xa9\x66\x29\x68\x36\x84\x5e\x2c\xeb\xd7\x32\x07\xa6\x69\xe2\x1d\xea\xfc\x9c\x7e\xf4\x15\x7e\xba\xfb\xf7\x23\xc0\x2e\x69\x1b\x77\x49\x86\x86\x71\x13\x4b\xe4\x2c\x3d\x61\x7e\x61\xac\xe8\x01\x49\x81\x83\x82\x8a\x48\xaa\xc1\x2d\x40\x1d\x83\x21\xf4\x88\x4a\x90\xec\xd0\x28\x7d\x67\xf5\x36\xf6\xec\xfa\x8c\xec\xed\xf6\x52\xfe\x7f\x00\x2a\x17\x0d\xbf\xca\x45\x13\xcc\x58\x02\x98\x4f\x53\x77\xf9\x32\xd4\x7f\x5f\x6d\xd6\x2e\x33\x56\xaf\xa5\x15\x37\x91\x54\xb9\x80\xdf\x01\x00\x00\xff\xff\xd2\x0f\xd3\x63\xfa\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1274, mode: os.FileMode(420), modTime: time.Unix(1514803553, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x32\x0c\x44\x2c\x0e\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 14, mode: os.FileMode(420), modTime: time.Unix(1514793353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binKeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binKeepBytes() ([]byte, error) {
	return bindataRead(
		_binKeep,
		"bin/.keep",
	)
}

func binKeep() (*asset, error) {
	bytes, err := binKeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/.keep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514144636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\x31\xae\x02\x31\x0c\x84\xe1\x7a\xe7\x14\x96\xab\x44\x5a\xbd\x03\xbc\x12\x2e\x40\x81\xe8\x43\x48\x90\xc5\xda\x59\x05\x2f\x0d\xe2\xee\x88\x20\xba\x7f\xe6\x5b\x53\xbe\xa5\x6b\x21\x4d\x62\x80\xe8\xda\xba\x53\xc0\xc4\x55\x9d\x11\x81\xba\x59\x1e\x1a\x22\x3d\x31\x55\xf5\xbf\x43\x17\xf3\xc5\x02\x9f\x4a\xbf\x4b\xb3\x7f\xe2\x99\x1e\xdf\x9e\x89\x69\xb7\xc9\x72\x39\x8a\x96\x01\xe7\xdf\xfa\xd0\xbe\xa9\x8a\x8f\x3f\x8f\x8c\x78\xe1\x1d\x00\x00\xff\xff\x42\x99\x27\x0b\x84\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 132, mode: os.FileMode(420), modTime: time.Unix(1514802835, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\x4b\x2c\x52\xd0\xe0\xe2\x4c\x2a\xcd\xcc\x49\x09\xc9\xcc\x4d\x55\xb0\x55\x50\x2a\xcd\x2b\x4e\x2d\x51\xe2\xe2\x4c\xce\xcf\xcd\xcd\x2c\x51\x50\x50\x40\x16\x2c\x4b\x2d\x2a\xce\xcc\xcf\x43\x15\x4c\x2a\x4a\xcc\x4b\xce\x40\x55\xa9\xc9\x05\x08\x00\x00\xff\xff\xb7\x30\xba\x84\x6a\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 106, mode: os.FileMode(420), modTime: time.Unix(1514721620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"Makefile": makefile,
	"README.md": readmeMd,
	"bin/.keep": binKeep,
	"main.go": mainGo,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		".keep": &bintree{binKeep, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

