// Code generated by go-bindata.
// sources:
// .gitignore
// LICENSE
// Makefile
// README.md
// bin/.keep
// main.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x02\x04\x00\x00\xff\xff\x15\xbe\x8a\x07\x06\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 6, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _license = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x51\xcd\x6e\xe3\x36\x10\xbe\xf3\x29\x3e\xe4\xb4\x0b\x08\xe9\xcf\xa5\x40\x6f\x8c\x44\x5b\x44\x65\xd2\xa0\xe8\x75\x7d\x94\x25\x3a\x62\x2b\x93\x86\x48\x27\xf0\xdb\x17\x23\x3b\xbb\xcd\x9e\x04\x71\xe6\xfb\x9d\x8d\xb4\x68\x7c\xef\x42\x72\x8c\x95\xf1\x72\x9b\xfd\xeb\x98\xf1\xa5\xff\x8a\xdf\x7f\xfd\xed\x0f\x88\xb7\x74\xbb\xfe\x1b\xdf\x50\xb9\xe0\x13\x63\x5b\x37\x9f\x7d\x4a\x3e\x06\xf8\x84\xd1\xcd\xee\x78\xc3\xeb\xdc\x85\xec\x86\x02\xa7\xd9\x39\xc4\x13\xfa\xb1\x9b\x5f\x5d\x81\x1c\xd1\x85\x1b\x2e\x6e\x4e\x31\x20\x1e\x73\xe7\x83\x0f\xaf\xe8\xd0\xc7\xcb\x8d\xc5\x13\xf2\xe8\x13\x52\x3c\xe5\xf7\x6e\x76\xe8\xc2\x80\x2e\xa5\xd8\xfb\x2e\xbb\x01\x43\xec\xaf\x67\x17\x72\x97\x49\xef\xe4\x27\x97\xf0\x25\x8f\x0e\x4f\xed\x03\xf1\xf4\x75\x11\x19\x5c\x37\x31\x1f\x40\xb3\x8f\x11\xde\x7d\x1e\xe3\x35\x63\x76\x29\xcf\xbe\x27\x8e\x02\x3e\xf4\xd3\x75\x20\x0f\x1f\xe3\xc9\x9f\xfd\x43\x81\xe0\x4b\xfe\xc4\x72\xc4\x35\xb9\x62\xf1\x59\xe0\x1c\x07\x7f\xa2\xaf\x5b\x62\x5d\xae\xc7\xc9\xa7\xb1\xc0\xe0\x89\xfa\x78\xcd\xae\x40\xa2\xc7\xa5\xc8\x82\x72\xfc\x12\x67\x24\x37\x4d\xac\x8f\x17\xef\x12\x96\xac\x3f\xdc\x2d\x3b\x64\xfd\x42\x85\xe6\x47\x45\x89\x5e\xde\xc7\x78\xfe\x9c\xc4\x27\x76\xba\xce\xc1\xa7\xd1\x2d\x98\x21\x22\xc5\x45\xf1\x1f\xd7\x67\x7a\xa1\xf5\x53\x9c\xa6\xf8\x4e\xd1\xfa\x18\x06\x4f\x89\xd2\x9f\x8c\xd9\xd1\xa1\x3b\xc6\x37\xb7\x64\xb9\x9f\x37\xc4\xec\xfb\x7b\xdd\xcb\x01\x2e\x3f\xae\xfa\x18\xa5\xb1\x9b\x26\x1c\xdd\xa3\x30\x37\xc0\x07\x74\xff\x8b\x33\x93\x7c\xca\x5d\xc8\xbe\x9b\x70\x89\xf3\xa2\xf7\x73\xcc\x67\xc6\x6c\x2d\xd0\xea\x95\xdd\x73\x23\x20\x5b\x6c\x8d\xfe\x26\x2b\x51\xe1\x89\xb7\x90\xed\x53\x81\xbd\xb4\xb5\xde\x59\xec\xb9\x31\x5c\xd9\x03\xf4\x0a\x5c\x1d\xf0\x97\x54\x55\x01\xf1\xf7\xd6\x88\xb6\x85\x36\x4c\x6e\xb6\x8d\x14\x55\x01\xa9\xca\x66\x57\x49\xb5\xc6\xcb\xce\x42\x69\x8b\x46\x6e\xa4\x15\x15\xac\x06\x09\x3e\xa8\xa4\x68\x89\x6c\x23\x4c\x59\x73\x65\xf9\x8b\x6c\xa4\x3d\x14\x6c\x25\xad\x22\xce\x95\x36\xe0\xd8\x72\x63\x65\xb9\x6b\xb8\xc1\x76\x67\xb6\xba\x15\xe0\xaa\x82\xd2\x4a\xaa\x95\x91\x6a\x2d\x36\x42\xd9\x67\x48\x05\xa5\x21\xbe\x09\x65\xd1\xd6\xbc\x69\x48\x8a\xf1\x9d\xad\xb5\x21\x7f\x28\xf5\xf6\x60\xe4\xba\xb6\xa8\x75\x53\x09\xd3\xe2\x45\xa0\x91\xfc\xa5\x11\x77\x29\x75\x40\xd9\x70\xb9\x29\x50\xf1\x0d\x5f\x8b\x05\xa5\x6d\x2d\x0c\xa3\xb5\xbb\x3b\xec\x6b\x41\x4f\xa4\xc7\x15\x78\x69\xa5\x56\x14\xa3\xd4\xca\x1a\x5e\xda\x02\x56\x1b\xfb\x1d\xba\x97\xad\x28\xc0\x8d\x6c\xa9\x90\x95\xd1\x9b\x82\x51\x9d\x7a\x45\x2b\x52\x11\x4e\x89\x3b\x0b\x55\x8d\x4f\x17\xd1\x66\xf9\xdf\xb5\xe2\x3b\x21\x2a\xc1\x1b\xa9\xd6\x2d\x81\x29\xe2\xc7\xf2\x33\xfb\x2f\x00\x00\xff\xff\x6e\x3a\x91\xc9\x2f\x04\x00\x00")

func licenseBytes() ([]byte, error) {
	return bindataRead(
		_license,
		"LICENSE",
	)
}

func license() (*asset, error) {
	bytes, err := licenseBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "LICENSE", size: 1071, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x51\x6f\xda\x3c\x14\x7d\xe6\xfe\x8a\xab\x7e\xe1\x6b\xbb\xcd\x41\x9b\xa6\x3d\x20\xa5\x55\x80\x14\x98\x80\x54\x21\x54\xab\x34\x09\x05\x62\x82\x37\xc7\x46\x8e\x03\x9d\xb2\xfc\xf7\xc9\x49\x28\x30\x69\x2f\x7d\x8b\x7d\xef\xb9\xe7\xdc\xe3\x03\xf6\xc0\x7b\x70\x17\x93\x70\x39\xf4\xdd\x09\x3a\x18\x71\x0e\xd0\x1b\xcf\xdc\xe0\x19\x1d\x4c\x24\xc9\xd6\x2a\xd2\xeb\x2d\x3c\x79\xe1\x32\xf0\x1e\xfd\x20\x44\x07\xf7\x54\xdb\x8a\xee\xa4\xd2\x30\xf4\xdd\xa0\x3f\x32\xc8\x34\xfe\xf2\x19\xe0\xc9\x0b\xe6\x63\x7f\x76\xef\xdc\x43\x6f\x31\x9e\x0c\x96\xe1\x78\xea\xdd\x3b\xd6\x4d\xb6\xa5\x9c\x63\x1c\x69\x8a\x24\xc7\xeb\xf7\xed\xe7\x76\xda\x8e\x49\x7b\xd4\x9e\x5e\xdf\x42\xdf\x9f\x4e\xc7\xe1\xa9\x2f\x61\x1a\x15\xdd\x93\x5d\xa4\x32\x8a\x23\xcf\x1d\xdc\x42\x2f\x70\x67\xfd\xd1\xbf\x7a\x08\x89\x56\x2b\x73\x54\x74\xd3\x00\xe0\x3f\x9c\xff\x4a\x39\x13\x3f\x91\x09\x2d\x71\xe8\x3f\xba\xe1\x08\x86\xe3\x70\xb4\xe8\x2d\x17\x73\x2f\x98\xb9\x53\xcf\xf9\x9a\xd3\x7d\x23\x76\x30\x0e\x1c\xab\xa8\xfb\xca\x4e\xa6\xd6\x9d\x84\xe9\x6d\xbe\xb2\xd7\x32\xed\x58\xc5\x5f\xc8\xb2\x63\x15\xb5\x57\x65\xc5\x45\x75\xbe\x43\xbd\xa5\x48\x78\xbc\xe1\x51\x92\xa1\xdc\x69\x26\x05\x6e\xa4\xc2\x44\xe2\x2a\x67\x3c\xc6\x2d\x55\xf4\x83\x11\x44\xd5\x4e\x72\xe3\x87\x81\xec\x23\xc5\xa2\x15\x37\x1f\x3c\xa7\x19\x4c\x06\x0f\x13\x77\x38\x47\xe7\x34\xec\x8a\x64\x48\x0e\xf8\x1d\x5a\xe4\x1b\xa6\x11\x13\xf6\x13\x55\x19\x93\xc2\xb1\x8a\xc6\xf6\xf2\xbc\xda\x97\x69\xca\xb4\x63\x15\xb5\xb9\x17\xb5\x9e\x8a\xc4\x7a\xeb\x58\x45\x6d\x6a\x79\x5e\x32\x2a\x43\x96\x52\x53\x7d\x7d\xc2\xf2\xca\xac\x58\xd5\x2a\xbd\x3b\x25\x7f\xd0\xb5\x86\x88\xf3\x2e\xae\x39\x8d\x84\x49\x05\x72\x26\xf2\x17\xdc\x28\x4a\x57\x59\x8c\x71\xa4\x0e\x4c\xe0\x81\x89\x58\x1e\x32\x80\xaa\xda\x85\xd6\xd0\xf7\xe7\x4e\xdd\x5a\xe7\xa7\x32\xdd\x7c\x94\x27\x9f\xac\xa2\xf1\xa0\x44\x22\x71\xc5\xc4\xc9\x6d\x52\x61\xc9\x09\x64\x03\x34\x9c\xc7\xe9\x47\x09\x6f\x9b\xdf\xa0\x2f\x19\xea\x6d\x8e\x04\xcd\x6e\x6f\x9b\x5f\x83\x2f\xc7\x37\x2e\x1d\xe7\x37\xc7\x37\x12\x34\xe8\x13\x83\x4d\x5f\xa8\x61\xd9\x53\xdd\x85\x56\x22\xab\xd7\xb2\x3b\xb6\x6d\xe3\x1d\x9a\xfc\x1c\x7f\xde\x25\x7e\xba\xfb\xff\x23\xc0\x26\x6d\x1a\x37\xa9\x46\xcb\xba\x49\x24\x72\x96\x1d\x31\xbf\x31\x51\x74\x87\x64\x8f\x9d\x3d\x15\xb1\x54\x9d\x5b\x80\x2a\x06\x5d\x68\x11\x95\x22\xd9\xa0\x55\x84\xde\xfc\x75\xec\xd9\xf5\x19\xd9\xeb\xed\xa5\xfc\x77\x00\x2a\x17\x35\xbf\xca\x45\x1d\xcc\x44\x02\xd8\x8f\x23\x7f\xf6\xdc\x35\xff\x53\x4d\xd6\x2e\x33\x56\xad\x65\x14\xd7\x91\x54\xb9\x80\x3f\x01\x00\x00\xff\xff\x5c\x88\x6d\xde\xe3\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1251, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x90\xcd\xae\xda\x30\x10\x85\xf7\x7e\x8a\x23\xd1\x55\xa5\x24\xfb\xbb\x03\x09\x51\x90\x00\x89\x9f\x4a\xac\x1a\x13\x26\x8e\x5b\xc7\x13\xd9\xe3\x20\xde\xbe\x32\x25\xb4\xaa\xee\xd2\xd6\xf9\xbe\x99\x33\x33\xac\xf6\xc5\xb1\x09\x5a\x9a\x4e\xa9\x53\x67\x23\xa2\xed\x07\x47\x70\xfa\xc1\x49\xd0\x72\xc0\x10\xf8\x27\x35\x12\xc1\x1e\x2b\x86\xd3\xde\x24\x6d\x48\xa9\x4d\x8a\x82\xc6\xb1\x27\x48\x46\x03\x0d\x1c\xad\x70\x78\x7c\x28\x05\x00\x5f\x60\xec\x94\xe8\x44\x86\xf8\x51\x55\xc6\x4a\x97\xae\x65\xc3\x7d\xb5\x49\x34\x56\x86\x8b\xf8\x67\x01\x78\xba\x17\xaf\x61\x2f\xbc\xb9\x7d\xf2\x19\x7a\x14\xa1\x45\x69\xac\xfc\x33\xc5\x7a\x2b\xb9\x02\x79\x34\x9d\xf6\x86\xb0\xd5\xbf\xa8\xb5\x8e\x4a\xa5\x66\xb3\xf7\x4b\xa9\x0b\x27\xc4\x8e\x93\xbb\x4d\xc9\x51\xbb\x44\x11\xdc\x42\x3a\x42\xcb\xce\xf1\xdd\x7a\x83\x51\x07\xab\xaf\x8e\xa2\x52\x5f\x51\x2f\xd6\xbb\xf9\xe1\x52\x4f\x50\x1b\xb8\x47\xfd\x77\xfd\x1a\xc2\x4f\xde\xeb\x9e\xb2\xeb\xc1\xe9\x7d\xbc\xcc\xaf\xd6\xa7\x6f\xe7\xc5\x8f\xf3\x71\x79\xd8\xcd\xb7\xcb\xff\x44\xf9\x18\x4f\xc5\x13\x4b\x91\x42\xf6\x64\xee\xfb\xf2\x70\x5c\xef\x77\x35\x22\xc9\x3b\xf0\xf2\x62\xa4\x10\x2d\xfb\xdc\x5c\xcb\x54\xeb\x4a\xb0\x52\xaa\xdf\x01\x00\x00\xff\xff\x50\x3d\x15\x7d\xde\x01\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 478, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binKeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binKeepBytes() ([]byte, error) {
	return bindataRead(
		_binKeep,
		"bin/.keep",
	)
}

func binKeep() (*asset, error) {
	bytes, err := binKeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/.keep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3d\x4f\xf3\x30\x10\xc7\xe7\xdc\xa7\x38\x79\x6a\xa4\xea\xe9\xfe\x48\x2c\x65\x61\x64\x40\x30\x5f\x1c\xbb\x39\x61\x9f\x2b\xfb\xd2\x0a\x21\xbe\x3b\x72\x9c\x12\x95\x89\xed\xff\x62\xff\xec\xbb\x33\xd9\x77\x3a\x39\x8c\xc4\x02\xc0\xf1\x9c\xb2\xe2\x0e\x3a\xe3\xa3\x1a\xe8\x01\x2e\x94\xab\x3f\x1c\xf0\x38\x73\x18\x5f\x38\x3a\xe4\x82\x84\x5a\x55\xa0\xc1\x05\x4c\x1e\x75\x72\x18\x53\x74\xa2\x78\x9d\x9c\x2c\x7e\x60\xa1\xfc\x81\x57\x2a\x38\xcc\x1c\x14\xba\x0d\xf1\x80\x66\x96\xe2\xd4\x2c\xe8\xc7\x14\x23\x6b\xe3\x06\x2a\x8a\xb6\x05\x13\x95\x09\x49\xff\x48\x5f\x29\xf7\xe8\x57\x97\x0b\x27\x69\xec\xe2\x22\x89\xb2\xc5\xcb\x9a\x26\x8f\x76\xce\xb9\x82\x2b\x64\x84\xee\x76\xfe\x9e\x72\xcc\x24\x76\x6a\x90\xa1\x69\x9f\x53\xc4\x13\xd7\xa9\x5a\xb0\xdd\xe8\x01\xfc\x2c\x76\x59\xea\xae\xc7\x4f\xe8\x7c\xd4\x7f\xcf\x99\x45\x83\xec\xcc\x93\x0b\x21\xe1\x5b\xca\x61\x34\xfd\xaf\x6e\x7d\xfe\x3f\x9a\xfd\xed\xeb\x7b\x34\xdb\xee\x97\xe2\xc7\xd5\xaa\x4d\xbd\xe4\x4d\xf6\xf0\x05\xdf\x01\x00\x00\xff\xff\x22\x96\x10\x21\xd7\x01\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 471, mode: os.FileMode(420), modTime: time.Unix(1514132483, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"LICENSE": license,
	"Makefile": makefile,
	"README.md": readmeMd,
	"bin/.keep": binKeep,
	"main.go": mainGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"LICENSE": &bintree{license, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		".keep": &bintree{binKeep, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

