// Code generated by go-bindata.
// sources:
// .gitignore
// Makefile
// README.md
// bin/.keep
// main.go
// version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x02\x04\x00\x00\xff\xff\x15\xbe\x8a\x07\x06\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 6, mode: os.FileMode(420), modTime: time.Unix(1514144579, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\xdf\x6f\xda\x3a\x14\x7e\xe6\xfc\x15\x47\xbd\xe1\xb6\xbd\x77\x0e\xda\x34\xed\x01\x29\xad\x42\x49\x01\x09\x48\x15\x42\xb5\x4a\x93\x50\x42\x4c\xf0\xe6\xd8\xc8\x71\xa0\x53\x96\xff\x7d\x72\x12\x0a\x4c\xda\x4b\xdf\x92\x1c\x7f\x3f\xce\xe7\x0f\xec\xa1\xf7\xe8\x2e\xa7\xe1\x6a\xe4\xbb\x53\x74\x30\xe2\x1c\x60\x30\x99\xbb\xc1\x0b\x3a\x58\x96\x68\xcf\xa3\x8c\x62\x55\xc1\xb3\x17\xae\x02\xef\xc9\x0f\x42\x74\x70\x4f\xb5\xad\xe8\x4e\x2a\x0d\x23\xdf\x0d\x1e\xc6\x06\x9a\x25\x5f\x3e\x03\x3c\x7b\xc1\x62\xe2\xcf\xef\x1d\x03\x7e\xa6\x2a\x67\x52\x18\xfc\x60\x39\x99\x0e\x57\xe1\x64\xe6\xdd\x3b\xd6\x4d\xbe\xa5\x9c\x63\x12\x69\x8a\xa4\xc0\xeb\xff\xbb\x2f\xdd\xac\x9b\x90\xee\xb8\x3b\xbb\xbe\x85\x07\x7f\x36\x9b\x84\xa7\x73\x29\xd3\xa8\xe8\x9e\xec\x22\x95\x53\x1c\x7b\xee\xf0\x16\x06\x81\x3b\x7f\x18\xff\xed\x0c\x21\x51\x1c\x9b\x57\x45\x37\x2d\x00\xfe\xc1\xc5\xcf\x8c\x33\xf1\x03\x99\xd0\x12\x47\xfe\x93\x1b\x8e\x61\x34\x09\xc7\xcb\xc1\x6a\xb9\xf0\x82\xb9\x3b\xf3\x6a\xdb\x6e\xa1\xb7\x52\x9d\x5c\x0f\x27\x81\x63\x95\x0d\xa0\xea\xe5\x6a\xdd\x4b\x99\xde\x16\xb1\xbd\x96\x59\xcf\x2a\xff\xa0\xa8\x7a\x56\xd9\x44\x58\xd5\xa2\x54\x17\x3b\xd4\x5b\x8a\x84\x27\x1b\x1e\xa5\x39\xca\x9d\x36\xa9\x6c\xa4\xc2\x54\x62\x5c\x30\x9e\xe0\x96\x2a\xfa\xc1\x38\xa3\x6a\x27\xb9\x09\xc6\x40\xf6\x91\x62\x51\xcc\xcd\x03\x2f\x68\x0e\xd3\xe1\xe3\xd4\x1d\x2d\xd0\x39\x91\x5d\x91\x1c\xc9\x01\xbf\x41\x87\x7c\xc5\x2c\x62\xc2\xde\x37\xa9\x3b\x56\xd9\x5e\x46\x75\x3e\x5d\xcb\x2c\x63\xda\xb1\xca\x26\xe5\x8b\x59\xac\x22\xb1\xde\x3a\x56\xd9\xa4\x5b\x9d\x8f\x8c\xcb\x90\x65\xd4\x4c\xdf\xee\xb2\xba\x32\x2b\x0e\xea\x0d\x8c\xdf\x9d\x92\xdf\xe9\x5a\x43\xc4\x79\x1f\xd7\x9c\x46\xc2\x74\x05\x39\x13\xc5\x2b\x6e\x14\xa5\x71\x9e\x60\x12\xa9\x03\x13\x78\x60\x22\x91\x87\x1c\xa0\x9e\xf6\xa1\x33\xf2\xfd\x85\xd3\x1c\x6d\x5a\x55\x87\x6e\x1e\xaa\x53\x4e\x56\xd9\x66\x50\x21\x91\x18\x33\x71\x4a\x9b\xd4\x58\x72\x02\xd9\x00\xad\xe6\x91\xfd\x68\xe1\x7d\xfc\x2d\xfa\x52\xa1\xd9\xe6\x28\xd0\xee\xf6\x3e\xfe\x06\x7c\x49\xdf\xa6\x74\xe4\x6f\x5f\xdf\x29\xd0\xa2\x4f\x0a\x36\x7d\xa5\x46\x65\x4f\x75\x1f\x3a\xa9\xac\x6f\xcb\xee\xd9\xb6\x8d\x77\x68\xfa\x73\xfc\xd1\x57\xf8\xe9\xee\xdf\x8f\x00\x9b\xac\x3d\xb8\xc9\x34\x5a\xd6\x4d\x2a\x91\xb3\xfc\x88\xf9\x85\xa9\xa2\x3b\x24\x7b\xec\xed\xa9\x48\xa4\xea\xdd\x02\xd4\x35\xe8\x43\x87\xa8\x0c\xc9\x06\xad\x32\xf4\x16\x6f\xb4\x67\x9f\xcf\xc4\xde\xbe\x5e\xda\xff\x0f\x40\x15\xa2\xd1\x57\x85\x68\x8a\x99\x4a\x00\xfb\x69\xec\xcf\x5f\xfa\xe6\xef\xab\xed\xda\x65\xc7\xea\xb5\x8c\xe3\xa6\x92\xaa\x10\xf0\x3b\x00\x00\xff\xff\x5c\xf3\x05\xd1\xfa\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1274, mode: os.FileMode(420), modTime: time.Unix(1514794338, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x32\x0c\x44\x2c\x0e\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 14, mode: os.FileMode(420), modTime: time.Unix(1514793353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binKeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binKeepBytes() ([]byte, error) {
	return bindataRead(
		_binKeep,
		"bin/.keep",
	)
}

func binKeep() (*asset, error) {
	bytes, err := binKeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/.keep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514144636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc9\x31\x0e\xc2\x30\x0c\x85\xe1\xb9\x3e\x85\xe5\x29\x91\x2a\x0e\xc0\x08\x0b\x23\x03\x82\x39\xa4\x09\xb2\x88\xe3\x2a\xb8\x2c\x88\xbb\x23\x82\x58\xba\xfd\xef\x7d\x73\x88\xf7\x70\x4b\x28\x81\x2b\x00\xcb\xac\xcd\xd0\xc1\x40\x59\x8c\xc0\x03\xe4\xa5\xc6\xae\xce\xe3\x0b\x86\x2c\xb6\x39\x36\xae\x56\xaa\xa3\x43\x2a\x45\xf1\xa2\xad\x4c\xe4\x57\x76\x4e\xed\xc1\x5a\xb7\x48\x23\x3e\x7f\x3d\x22\xe1\x6e\xe1\x32\x9d\x58\x52\x87\xeb\x7f\x7d\x69\xaf\x22\x6c\xfd\x8f\x3d\x3d\xbc\xe1\x13\x00\x00\xff\xff\x17\x46\x01\xd4\xa0\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 160, mode: os.FileMode(420), modTime: time.Unix(1514143701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\x4b\x2c\x52\xd0\xe0\xe2\x4c\x2a\xcd\xcc\x49\x09\xc9\xcc\x4d\x55\xb0\x55\x50\x2a\xcd\x2b\x4e\x2d\x51\xe2\xe2\x4c\xce\xcf\xcd\xcd\x2c\x51\x50\x50\x40\x16\x2c\x4b\x2d\x2a\xce\xcc\xcf\x43\x15\x4c\x2a\x4a\xcc\x4b\xce\x40\x55\xa9\xc9\x05\x08\x00\x00\xff\xff\xb7\x30\xba\x84\x6a\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 106, mode: os.FileMode(420), modTime: time.Unix(1514721620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"Makefile": makefile,
	"README.md": readmeMd,
	"bin/.keep": binKeep,
	"main.go": mainGo,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		".keep": &bintree{binKeep, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

