// Code generated by go-bindata.
// sources:
// .gitignore
// Makefile
// README.md
// bin/.keep
// main.go
// version.go
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x02\x04\x00\x00\xff\xff\x15\xbe\x8a\x07\x06\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 6, mode: os.FileMode(420), modTime: time.Unix(1514144579, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x54\x61\x8f\x9a\x40\x10\xfd\xec\xfc\x8a\xc9\x15\x7b\x67\xdb\xc5\xb4\x69\xfa\xc1\x84\xbb\xe0\xc9\xa9\x89\xca\x05\xf1\xd2\x4b\x9a\x18\x90\x05\xb7\x5d\x76\xcd\x02\x7a\x0d\xe5\xbf\x37\x0b\x78\x6a\x93\x7e\xb9\x6f\xb0\x33\xef\xbd\x99\xb7\x2f\x6b\x8e\x9c\x07\x7b\x35\xf3\xd7\x63\xd7\x9e\xa1\x85\x01\xe7\x00\xc3\xe9\xc2\xf6\x9e\xd1\xc2\xb2\x44\x73\x11\xa4\x14\xab\x0a\x9e\x1c\x7f\xed\x39\x8f\xae\xe7\xa3\x85\x7b\x9a\x9b\x8a\xee\xa4\xca\x61\xec\xda\xde\xfd\x44\x43\xd3\xe8\xdb\x57\x80\x27\xc7\x5b\x4e\xdd\xc5\x9d\xa5\xc1\x4f\x54\x65\x4c\x0a\x8d\x1f\xae\xa6\xb3\xd1\xda\x9f\xce\x9d\x3b\xcb\xb8\xc9\xb6\x94\x73\x8c\x82\x9c\x22\x29\xf0\xfa\x63\xf7\xb9\x9b\x76\x23\xd2\x9d\x74\xe7\xd7\x3d\xb8\x77\xe7\xf3\xa9\x7f\xea\x4b\x58\x8e\x8a\xee\xc9\x2e\x50\x19\xc5\x89\x63\x8f\x7a\x30\xf4\xec\xc5\xfd\xe4\x7f\x3d\x84\x04\x61\xa8\x7f\x15\x8d\x5b\x00\xbc\xc3\xe5\xef\x94\x33\xf1\x0b\x99\xc8\x25\x8e\xdd\x47\xdb\x9f\xc0\x78\xea\x4f\x56\xc3\xf5\x6a\xe9\x78\x0b\x7b\xee\x5c\xf0\x6d\xa4\x88\x59\x82\x84\x24\x34\xd7\x07\xdb\x22\x34\x8b\x8c\xaa\x5e\xbb\xcd\x68\xea\x59\x46\xd9\x10\x55\xfd\x4c\x6d\xfa\x6d\xd3\x46\xa6\x7d\xa3\xfc\x87\xba\xea\x1b\x65\x63\x6d\x55\x0f\x43\xf3\x62\x87\xf9\x96\x22\xe1\x51\xcc\x83\x24\x43\xb9\xcb\xb5\x5b\xb1\x54\x98\x48\x0c\x0b\xc6\x23\xdc\x52\x45\x3f\xe9\x89\xa9\xda\x49\xae\x0d\xd3\x90\x7d\xa0\x58\x10\x72\xfd\xc1\x0b\x9a\xc1\x6c\xf4\x30\xb3\xc7\x4b\xb4\x4e\x64\x57\x24\x43\x72\xc0\x1f\xd0\x21\xdf\x31\x0d\x98\x30\xf7\xcd\x6d\x58\x46\xd9\x5e\x52\x75\x5e\xdd\xc8\x34\x65\xb9\x65\x94\x8d\xfb\x17\xb5\x50\x05\x62\xb3\xb5\x8c\xb2\x71\xbd\x3a\x2f\xe9\x29\x7d\x96\x52\x5d\x7d\xbd\xe3\xea\x4a\xaf\x38\xac\x37\xd0\xf3\xee\x94\xfc\x49\x37\x39\x04\x9c\x0f\x70\xc3\x69\x20\x74\x86\x90\x33\x51\xbc\x60\xac\x28\x0d\xb3\x08\xa3\x40\x1d\x98\xc0\x03\x13\x91\x3c\x64\x00\x75\x75\x00\x9d\xb1\xeb\x2e\xad\xa6\xb5\x49\x5b\x6d\xba\xfe\xa8\x4e\x3e\x19\x65\xeb\x41\x85\x44\x62\xc8\xc4\xc9\x6d\x52\x63\xc9\x09\x64\x02\xb4\x9a\x47\xf6\xe3\x08\x6f\xe3\x6f\xd1\x97\x0a\xcd\x36\x47\x81\x76\xb7\xb7\xf1\x37\xe0\x4b\xfa\xd6\xa5\x23\x7f\xfb\xfb\x46\x81\x16\x7d\x52\x30\xe9\x0b\xd5\x2a\x7b\x9a\x0f\xa0\x93\xc8\xfa\xb6\xcc\xbe\x69\x9a\x78\x8b\x3a\x3f\xc7\xc7\xa0\xc2\x2f\xb7\xef\x3f\x03\xc4\x69\xdb\x18\xa7\x39\x1a\xc6\x4d\x22\x91\xb3\xec\x88\xf9\x83\x89\xa2\x3b\x24\x7b\xec\xef\xa9\x88\xa4\xea\xf7\x00\xea\x18\x0c\xa0\x43\x54\x8a\x24\x46\xa3\xf4\x9d\xe5\x2b\xed\xd9\xf1\x99\xd8\xeb\xe9\xe5\xf8\x1f\x00\x54\x21\x1a\x7d\x55\x88\x26\x98\x89\x04\x30\x1f\x27\xee\xe2\x79\xa0\x9f\xb5\x36\x6b\x97\x19\xab\xd7\xd2\x13\x37\x91\x54\x85\x80\xbf\x01\x00\x00\xff\xff\x7e\x72\x6c\x78\x12\x05\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1298, mode: os.FileMode(420), modTime: time.Unix(1514801282, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x32\x0c\x44\x2c\x0e\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 14, mode: os.FileMode(420), modTime: time.Unix(1514793353, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _binKeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func binKeepBytes() ([]byte, error) {
	return bindataRead(
		_binKeep,
		"bin/.keep",
	)
}

func binKeep() (*asset, error) {
	bytes, err := binKeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bin/.keep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1514144636, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xc9\x31\x0e\xc2\x30\x0c\x85\xe1\xb9\x3e\x85\xe5\x29\x91\x2a\x0e\xc0\x08\x0b\x23\x03\x82\x39\xa4\x09\xb2\x88\xe3\x2a\xb8\x2c\x88\xbb\x23\x82\x58\xba\xfd\xef\x7d\x73\x88\xf7\x70\x4b\x28\x81\x2b\x00\xcb\xac\xcd\xd0\xc1\x40\x59\x8c\xc0\x03\xe4\xa5\xc6\xae\xce\xe3\x0b\x86\x2c\xb6\x39\x36\xae\x56\xaa\xa3\x43\x2a\x45\xf1\xa2\xad\x4c\xe4\x57\x76\x4e\xed\xc1\x5a\xb7\x48\x23\x3e\x7f\x3d\x22\xe1\x6e\xe1\x32\x9d\x58\x52\x87\xeb\x7f\x7d\x69\xaf\x22\x6c\xfd\x8f\x3d\x3d\xbc\xe1\x13\x00\x00\xff\xff\x17\x46\x01\xd4\xa0\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 160, mode: os.FileMode(420), modTime: time.Unix(1514143701, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\x4b\x2c\x52\xd0\xe0\xe2\x4c\x2a\xcd\xcc\x49\x09\xc9\xcc\x4d\x55\xb0\x55\x50\x2a\xcd\x2b\x4e\x2d\x51\xe2\xe2\x4c\xce\xcf\xcd\xcd\x2c\x51\x50\x50\x40\x16\x2c\x4b\x2d\x2a\xce\xcc\xcf\x43\x15\x4c\x2a\x4a\xcc\x4b\xce\x40\x55\xa9\xc9\x05\x08\x00\x00\xff\xff\xb7\x30\xba\x84\x6a\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 106, mode: os.FileMode(420), modTime: time.Unix(1514721620, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,
	"Makefile": makefile,
	"README.md": readmeMd,
	"bin/.keep": binKeep,
	"main.go": mainGo,
	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Makefile": &bintree{makefile, map[string]*bintree{}},
	"README.md": &bintree{readmeMd, map[string]*bintree{}},
	"bin": &bintree{nil, map[string]*bintree{
		".keep": &bintree{binKeep, map[string]*bintree{}},
	}},
	"main.go": &bintree{mainGo, map[string]*bintree{}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

