// Code generated by go-bindata. DO NOT EDIT.
// sources:
// Templates/.gitignore (17B)
// Templates/Makefile (1.196kB)
// Templates/README.md (14B)
// Templates/main.go (132B)
// Templates/version.go (106B)

package main

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitignore = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\xca\xcc\xd3\xd7\xe2\x2a\x4b\x2d\xd1\x2b\x4a\x2d\xc8\x2f\x2a\xe1\x02\x04\x00\x00\xff\xff\xbd\xe5\xe7\xf8\x11\x00\x00\x00")

func GitignoreBytes() ([]byte, error) {
	return bindataRead(
		_Gitignore,
		".gitignore",
	)
}

func Gitignore() (*asset, error) {
	bytes, err := GitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitignore", size: 17, mode: os.FileMode(0644), modTime: time.Unix(1547032455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x52, 0x57, 0x82, 0xb0, 0x5d, 0x23, 0x45, 0x12, 0x75, 0xfb, 0x29, 0xd2, 0x49, 0xd2, 0xc3, 0x1b, 0xfa, 0x18, 0xa, 0x16, 0x39, 0x48, 0xaf, 0x21, 0x7, 0xc9, 0x3a, 0xcd, 0x3c, 0x93, 0x89, 0xb0}}
	return a, nil
}

var _makefile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x94\x5f\x6f\xda\x30\x14\xc5\x9f\x7b\x3f\xc5\x55\x17\xd6\x76\x9b\x83\x36\x4d\x7b\xa8\x94\x76\xa1\x50\x40\x02\x52\x01\xad\x56\x69\x52\xe5\x90\x9b\xe0\xcd\x89\x23\xe7\x0f\x95\xb2\x7c\xf7\xc9\x24\x94\xf2\xc0\x0b\x6f\x4e\xae\x7f\x3e\xe7\x5e\x9f\xc4\xee\x0f\xee\xdd\xc7\xc9\xf2\x65\xe8\xb9\x13\x74\x90\x4b\x09\xd0\x1b\xcf\xdc\xf9\x33\x3a\x58\x55\x68\xcf\x78\x4c\x58\xd7\xf0\x34\x58\xbe\xcc\x07\x0f\xde\x7c\x89\x0e\x96\x94\xdb\x9a\x52\xa5\x73\x18\x7a\xee\xfc\x6e\x64\xd0\x38\xf8\xf1\x1d\xe0\x69\x30\x5f\x8c\xbd\xd9\xad\x63\xe0\x27\xd2\x99\x50\x89\xe1\x7b\x8f\xe3\x49\xff\x65\x39\x9e\x0e\x6e\x1d\xeb\x32\x5b\x93\x94\x18\xf0\x9c\x90\x15\x78\xf1\xb9\xf3\xdc\x89\x3b\x01\xeb\x8c\x3a\xd3\x8b\x2b\xb8\xf3\xa6\xd3\xf1\x72\xbf\x2f\x12\x39\x6a\x2a\x59\xca\x75\x46\x38\x1a\xb8\xfd\x2b\xe8\xcd\xdd\xd9\xdd\xe8\xd8\x1e\xc6\xb8\xef\x9b\x47\x4d\x61\x0b\xc0\x07\x5c\x50\x5e\xa4\x98\xaf\x09\x99\x0c\x42\xc9\xa3\x0c\x55\x9a\x1b\x83\xa1\xd2\x18\x29\xf4\x0b\x21\x03\x5c\x93\xa6\x2f\x28\x92\x9c\x74\xaa\xa4\xf1\x68\x90\x92\x6b\xc1\x7d\x69\x16\xb2\xa0\x0c\x26\xfd\xfb\x89\x3b\x5c\xa0\xb3\x3f\xec\x9c\x65\xc8\x36\xf8\x1b\xce\xd8\x2f\x8c\xb9\x48\xec\xb2\x19\x80\x63\x55\xed\x5c\xea\xf7\xd5\x95\x8a\x63\x91\x3b\x56\xd5\x34\x7c\x50\xf3\x35\x4f\x56\x6b\xc7\xaa\x9a\x46\xeb\xf7\x25\xe3\x72\x29\x62\x32\xd5\xb7\xb1\xd6\xe7\xa6\xc5\xde\xb6\x03\xe3\x37\xd5\xea\x0f\xad\x72\xe0\x52\x5e\xe3\x4a\x12\x4f\xcc\xb5\xa1\x14\x49\xf1\x8a\xa1\x26\xf2\xb3\x00\x03\xae\x37\x22\xc1\x8d\x48\x02\xb5\xc9\x00\xb6\xd5\x6b\x38\xfb\x19\xff\x0d\x84\x46\x96\xa2\x2f\x12\x38\x1b\x7a\xde\xc2\x69\xc8\xe6\xbe\x1d\xab\x6a\x16\xf5\x7e\x6c\x56\xd5\x8e\xa4\x46\xa6\x0c\xd7\xb5\xaa\x26\x4a\x35\xdb\xb2\x6c\x0f\xd9\x00\xad\x85\x23\x62\x3b\x83\xa7\xc9\xb5\xf4\xa1\x60\xd3\xeb\x11\xbd\x76\x10\xa7\xc9\x35\xf0\xa1\x5a\x3b\xd2\x23\x72\x6d\xf5\x44\xbd\x96\xde\x0b\xda\xf4\x4a\x46\xb4\xa4\xdc\x08\x46\x6a\x7b\xd5\x76\xd7\xb6\x6d\xbc\x41\x13\xbe\xdd\xc7\x5b\xe3\xb7\x9b\x8f\x5f\x01\xc2\x78\xb7\x33\x8c\x73\xb4\xac\xcb\x48\xa1\x14\xd9\x0e\xfa\x87\x91\xa6\x14\x59\x89\xdd\x92\x92\x40\xe9\xee\x15\xc0\x36\x44\x86\xd2\x31\xb2\xf0\xf0\xd8\xb7\xb7\x87\x4e\x3f\x01\xe8\xc2\x30\x91\x42\x5d\x24\x4d\x7e\x23\x05\x60\x3f\x8c\xbc\xd9\xf3\xb5\xf9\xe1\xb4\x91\x3c\x8c\xe2\xb6\x01\x63\xad\x49\xae\x2e\x12\xf8\x1f\x00\x00\xff\xff\x29\xb7\xcb\x25\xac\x04\x00\x00")

func makefileBytes() ([]byte, error) {
	return bindataRead(
		_makefile,
		"Makefile",
	)
}

func makefile() (*asset, error) {
	bytes, err := makefileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "Makefile", size: 1196, mode: os.FileMode(0644), modTime: time.Unix(1547036982, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x5f, 0x72, 0xad, 0x96, 0x3e, 0xc2, 0x8a, 0xdd, 0x9a, 0xad, 0xfd, 0x5b, 0x62, 0x91, 0x40, 0x3f, 0x36, 0x9f, 0xbc, 0x12, 0xa0, 0x42, 0x6, 0x28, 0xe6, 0x3e, 0xd9, 0xa, 0x9b, 0xec, 0x47, 0x37}}
	return a, nil
}

var _readmeMd = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\x56\xa8\xae\x56\xd0\xf3\x4b\xcc\x4d\x55\xa8\xad\xe5\x02\x04\x00\x00\xff\xff\x32\x0c\x44\x2c\x0e\x00\x00\x00")

func readmeMdBytes() ([]byte, error) {
	return bindataRead(
		_readmeMd,
		"README.md",
	)
}

func readmeMd() (*asset, error) {
	bytes, err := readmeMdBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "README.md", size: 14, mode: os.FileMode(0644), modTime: time.Unix(1547036738, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x33, 0x92, 0x43, 0x1b, 0x73, 0x34, 0x4a, 0xff, 0xab, 0xa2, 0x4e, 0x6f, 0x6b, 0xad, 0x68, 0xb6, 0xe2, 0xe0, 0xc1, 0x72, 0xa4, 0xb0, 0xbc, 0xf6, 0xbe, 0x65, 0x5a, 0x9a, 0x95, 0x32, 0x6c, 0x79}}
	return a, nil
}

var _mainGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xc9\x31\xae\x02\x31\x0c\x84\xe1\x7a\xe7\x14\x96\xab\x44\x5a\xbd\x03\xbc\x12\x2e\x40\x81\xe8\x43\x48\x90\xc5\xda\x59\x05\x2f\x0d\xe2\xee\x88\x20\xba\x7f\xe6\x5b\x53\xbe\xa5\x6b\x21\x4d\x62\x80\xe8\xda\xba\x53\xc0\xc4\x55\x9d\x11\x81\xba\x59\x1e\x1a\x22\x3d\x31\x55\xf5\xbf\x43\x17\xf3\xc5\x02\x9f\x4a\xbf\x4b\xb3\x7f\xe2\x99\x1e\xdf\x9e\x89\x69\xb7\xc9\x72\x39\x8a\x96\x01\xe7\xdf\xfa\xd0\xbe\xa9\x8a\x8f\x3f\x8f\x8c\x78\xe1\x1d\x00\x00\xff\xff\x42\x99\x27\x0b\x84\x00\x00\x00")

func mainGoBytes() ([]byte, error) {
	return bindataRead(
		_mainGo,
		"main.go",
	)
}

func mainGo() (*asset, error) {
	bytes, err := mainGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "main.go", size: 132, mode: os.FileMode(0644), modTime: time.Unix(1547032455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xd0, 0xf9, 0x87, 0x11, 0x77, 0xf6, 0x4b, 0x7c, 0xd5, 0x6e, 0x33, 0xa4, 0x62, 0x20, 0xbe, 0x92, 0x99, 0x17, 0x25, 0x96, 0xf8, 0xa0, 0x11, 0x19, 0x36, 0xc5, 0x5d, 0xcf, 0x8e, 0x2f, 0x44, 0x61}}
	return a, nil
}

var _versionGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\x4b\x2c\x52\xd0\xe0\xe2\x4c\x2a\xcd\xcc\x49\x09\xc9\xcc\x4d\x55\xb0\x55\x50\x2a\xcd\x2b\x4e\x2d\x51\xe2\xe2\x4c\xce\xcf\xcd\xcd\x2c\x51\x50\x50\x40\x16\x2c\x4b\x2d\x2a\xce\xcc\xcf\x43\x15\x4c\x2a\x4a\xcc\x4b\xce\x40\x55\xa9\xc9\x05\x08\x00\x00\xff\xff\xb7\x30\xba\x84\x6a\x00\x00\x00")

func versionGoBytes() ([]byte, error) {
	return bindataRead(
		_versionGo,
		"version.go",
	)
}

func versionGo() (*asset, error) {
	bytes, err := versionGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "version.go", size: 106, mode: os.FileMode(0644), modTime: time.Unix(1547032455, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xad, 0x26, 0xe7, 0x0, 0x3f, 0x93, 0x24, 0x70, 0xe, 0x20, 0x3d, 0xe5, 0x6, 0x50, 0xe4, 0x2f, 0xdd, 0xef, 0xd9, 0x57, 0xa0, 0x83, 0x7c, 0xf4, 0x97, 0x3f, 0xac, 0x13, 0xe0, 0x2, 0xae, 0xed}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitignore": Gitignore,

	"Makefile": makefile,

	"README.md": readmeMd,

	"main.go": mainGo,

	"version.go": versionGo,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitignore": &bintree{Gitignore, map[string]*bintree{}},
	"Makefile":   &bintree{makefile, map[string]*bintree{}},
	"README.md":  &bintree{readmeMd, map[string]*bintree{}},
	"main.go":    &bintree{mainGo, map[string]*bintree{}},
	"version.go": &bintree{versionGo, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
